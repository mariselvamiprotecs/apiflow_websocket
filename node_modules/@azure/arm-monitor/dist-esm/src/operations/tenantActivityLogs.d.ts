import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { TenantActivityLogs } from "../operationsInterfaces";
import { MonitorClient } from "../monitorClient";
import { EventData, TenantActivityLogsListOptionalParams } from "../models";
/** Class containing TenantActivityLogs operations. */
export declare class TenantActivityLogsImpl implements TenantActivityLogs {
    private readonly client;
    /**
     * Initialize a new instance of the class TenantActivityLogs class.
     * @param client Reference to the service client
     */
    constructor(client: MonitorClient);
    /**
     * Gets the Activity Logs for the Tenant.<br>Everything that is applicable to the API to get the
     * Activity Logs for the subscription is applicable to this API (the parameters, $filter, etc.).<br>One
     * thing to point out here is that this API does *not* retrieve the logs at the individual subscription
     * of the tenant but only surfaces the logs that were generated at the tenant level.
     * @param options The options parameters.
     */
    list(options?: TenantActivityLogsListOptionalParams): PagedAsyncIterableIterator<EventData>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets the Activity Logs for the Tenant.<br>Everything that is applicable to the API to get the
     * Activity Logs for the subscription is applicable to this API (the parameters, $filter, etc.).<br>One
     * thing to point out here is that this API does *not* retrieve the logs at the individual subscription
     * of the tenant but only surfaces the logs that were generated at the tenant level.
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=tenantActivityLogs.d.ts.map