import { MetricAlertsStatus } from "../operationsInterfaces";
import { MonitorClient } from "../monitorClient";
import { MetricAlertsStatusListOptionalParams, MetricAlertsStatusListResponse, MetricAlertsStatusListByNameOptionalParams, MetricAlertsStatusListByNameResponse } from "../models";
/** Class containing MetricAlertsStatus operations. */
export declare class MetricAlertsStatusImpl implements MetricAlertsStatus {
    private readonly client;
    /**
     * Initialize a new instance of the class MetricAlertsStatus class.
     * @param client Reference to the service client
     */
    constructor(client: MonitorClient);
    /**
     * Retrieve an alert rule status.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ruleName The name of the rule.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, ruleName: string, options?: MetricAlertsStatusListOptionalParams): Promise<MetricAlertsStatusListResponse>;
    /**
     * Retrieve an alert rule status.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ruleName The name of the rule.
     * @param statusName The name of the status.
     * @param options The options parameters.
     */
    listByName(resourceGroupName: string, ruleName: string, statusName: string, options?: MetricAlertsStatusListByNameOptionalParams): Promise<MetricAlertsStatusListByNameResponse>;
}
//# sourceMappingURL=metricAlertsStatus.d.ts.map