import { DiagnosticSettings } from "../operationsInterfaces";
import { MonitorClient } from "../monitorClient";
import { DiagnosticSettingsGetOptionalParams, DiagnosticSettingsGetResponse, DiagnosticSettingsResource, DiagnosticSettingsCreateOrUpdateOptionalParams, DiagnosticSettingsCreateOrUpdateResponse, DiagnosticSettingsDeleteOptionalParams, DiagnosticSettingsListOptionalParams, DiagnosticSettingsListResponse } from "../models";
/** Class containing DiagnosticSettings operations. */
export declare class DiagnosticSettingsImpl implements DiagnosticSettings {
    private readonly client;
    /**
     * Initialize a new instance of the class DiagnosticSettings class.
     * @param client Reference to the service client
     */
    constructor(client: MonitorClient);
    /**
     * Gets the active diagnostic settings for the specified resource.
     * @param resourceUri The identifier of the resource.
     * @param name The name of the diagnostic setting.
     * @param options The options parameters.
     */
    get(resourceUri: string, name: string, options?: DiagnosticSettingsGetOptionalParams): Promise<DiagnosticSettingsGetResponse>;
    /**
     * Creates or updates diagnostic settings for the specified resource.
     * @param resourceUri The identifier of the resource.
     * @param name The name of the diagnostic setting.
     * @param parameters Parameters supplied to the operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceUri: string, name: string, parameters: DiagnosticSettingsResource, options?: DiagnosticSettingsCreateOrUpdateOptionalParams): Promise<DiagnosticSettingsCreateOrUpdateResponse>;
    /**
     * Deletes existing diagnostic settings for the specified resource.
     * @param resourceUri The identifier of the resource.
     * @param name The name of the diagnostic setting.
     * @param options The options parameters.
     */
    delete(resourceUri: string, name: string, options?: DiagnosticSettingsDeleteOptionalParams): Promise<void>;
    /**
     * Gets the active diagnostic settings list for the specified resource.
     * @param resourceUri The identifier of the resource.
     * @param options The options parameters.
     */
    list(resourceUri: string, options?: DiagnosticSettingsListOptionalParams): Promise<DiagnosticSettingsListResponse>;
}
//# sourceMappingURL=diagnosticSettings.d.ts.map