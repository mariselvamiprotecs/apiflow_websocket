/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { AutoscaleSettingResource as AutoscaleSettingResourceMapper, AutoscaleSettingResourcePatch as AutoscaleSettingResourcePatchMapper, AlertRuleResource as AlertRuleResourceMapper, AlertRuleResourcePatch as AlertRuleResourcePatchMapper, LogProfileResource as LogProfileResourceMapper, LogProfileResourcePatch as LogProfileResourcePatchMapper, DiagnosticSettingsResource as DiagnosticSettingsResourceMapper, ActionGroupResource as ActionGroupResourceMapper, ActionGroupPatchBody as ActionGroupPatchBodyMapper, NotificationRequestBody as NotificationRequestBodyMapper, EnableRequest as EnableRequestMapper, MetricAlertResource as MetricAlertResourceMapper, MetricAlertResourcePatch as MetricAlertResourcePatchMapper, LogSearchRuleResource as LogSearchRuleResourceMapper, LogSearchRuleResourcePatch as LogSearchRuleResourcePatchMapper, AzureMonitorPrivateLinkScope as AzureMonitorPrivateLinkScopeMapper, TagsResource as TagsResourceMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, ScopedResource as ScopedResourceMapper, ActivityLogAlertResource as ActivityLogAlertResourceMapper, ActivityLogAlertPatchBody as ActivityLogAlertPatchBodyMapper, DataCollectionEndpointResource as DataCollectionEndpointResourceMapper, ResourceForUpdate as ResourceForUpdateMapper, DataCollectionRuleAssociationProxyOnlyResource as DataCollectionRuleAssociationProxyOnlyResourceMapper, DataCollectionRuleResource as DataCollectionRuleResourceMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2015-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: AutoscaleSettingResourceMapper
};
export const autoscaleSettingName = {
    parameterPath: "autoscaleSettingName",
    mapper: {
        serializedName: "autoscaleSettingName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const autoscaleSettingResource = {
    parameterPath: "autoscaleSettingResource",
    mapper: AutoscaleSettingResourcePatchMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const ruleName = {
    parameterPath: "ruleName",
    mapper: {
        serializedName: "ruleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const incidentName = {
    parameterPath: "incidentName",
    mapper: {
        serializedName: "incidentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2016-03-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: AlertRuleResourceMapper
};
export const alertRulesResource = {
    parameterPath: "alertRulesResource",
    mapper: AlertRuleResourcePatchMapper
};
export const logProfileName = {
    parameterPath: "logProfileName",
    mapper: {
        serializedName: "logProfileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: LogProfileResourceMapper
};
export const logProfilesResource = {
    parameterPath: "logProfilesResource",
    mapper: LogProfileResourcePatchMapper
};
export const resourceUri = {
    parameterPath: "resourceUri",
    mapper: {
        serializedName: "resourceUri",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion2 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2017-05-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: DiagnosticSettingsResourceMapper
};
export const actionGroup = {
    parameterPath: "actionGroup",
    mapper: ActionGroupResourceMapper
};
export const actionGroupName = {
    parameterPath: "actionGroupName",
    mapper: {
        serializedName: "actionGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion3 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-09-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const actionGroupPatch = {
    parameterPath: "actionGroupPatch",
    mapper: ActionGroupPatchBodyMapper
};
export const notificationRequest = {
    parameterPath: "notificationRequest",
    mapper: NotificationRequestBodyMapper
};
export const notificationId = {
    parameterPath: "notificationId",
    mapper: {
        serializedName: "notificationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const enableRequest = {
    parameterPath: "enableRequest",
    mapper: EnableRequestMapper
};
export const filter = {
    parameterPath: "filter",
    mapper: {
        serializedName: "$filter",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const select = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$select",
        type: {
            name: "String"
        }
    }
};
export const filter1 = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const apiVersion4 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2018-01-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const metricnamespace = {
    parameterPath: ["options", "metricnamespace"],
    mapper: {
        serializedName: "metricnamespace",
        type: {
            name: "String"
        }
    }
};
export const timespan = {
    parameterPath: ["options", "timespan"],
    mapper: {
        serializedName: "timespan",
        type: {
            name: "String"
        }
    }
};
export const interval = {
    parameterPath: ["options", "interval"],
    mapper: {
        serializedName: "interval",
        type: {
            name: "TimeSpan"
        }
    }
};
export const metricnames = {
    parameterPath: ["options", "metricnames"],
    mapper: {
        serializedName: "metricnames",
        type: {
            name: "String"
        }
    }
};
export const aggregation = {
    parameterPath: ["options", "aggregation"],
    mapper: {
        serializedName: "aggregation",
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "top",
        type: {
            name: "Number"
        }
    }
};
export const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "orderby",
        type: {
            name: "String"
        }
    }
};
export const resultType = {
    parameterPath: ["options", "resultType"],
    mapper: {
        serializedName: "resultType",
        type: {
            name: "Enum",
            allowedValues: ["Data", "Metadata"]
        }
    }
};
export const sensitivities = {
    parameterPath: ["options", "sensitivities"],
    mapper: {
        serializedName: "sensitivities",
        type: {
            name: "String"
        }
    }
};
export const apiVersion5 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-03-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const apiVersion6 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2018-03-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: MetricAlertResourceMapper
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: MetricAlertResourcePatchMapper
};
export const statusName = {
    parameterPath: "statusName",
    mapper: {
        serializedName: "statusName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: LogSearchRuleResourceMapper
};
export const apiVersion7 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2018-04-16",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: LogSearchRuleResourcePatchMapper
};
export const apiVersion8 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2017-12-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const startTime = {
    parameterPath: ["options", "startTime"],
    mapper: {
        serializedName: "startTime",
        type: {
            name: "String"
        }
    }
};
export const apiVersion9 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2018-11-27-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const apiVersion10 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-10-17-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const scopeName = {
    parameterPath: "scopeName",
    mapper: {
        serializedName: "scopeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const azureMonitorPrivateLinkScopePayload = {
    parameterPath: "azureMonitorPrivateLinkScopePayload",
    mapper: AzureMonitorPrivateLinkScopeMapper
};
export const privateLinkScopeTags = {
    parameterPath: "privateLinkScopeTags",
    mapper: TagsResourceMapper
};
export const asyncOperationId = {
    parameterPath: "asyncOperationId",
    mapper: {
        serializedName: "asyncOperationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const groupName = {
    parameterPath: "groupName",
    mapper: {
        serializedName: "groupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: PrivateEndpointConnectionMapper
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: ScopedResourceMapper
};
export const activityLogAlert = {
    parameterPath: "activityLogAlert",
    mapper: ActivityLogAlertResourceMapper
};
export const activityLogAlertName = {
    parameterPath: "activityLogAlertName",
    mapper: {
        serializedName: "activityLogAlertName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion11 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2017-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const activityLogAlertPatch = {
    parameterPath: "activityLogAlertPatch",
    mapper: ActivityLogAlertPatchBodyMapper
};
export const apiVersion12 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const dataCollectionEndpointName = {
    parameterPath: "dataCollectionEndpointName",
    mapper: {
        serializedName: "dataCollectionEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body = {
    parameterPath: ["options", "body"],
    mapper: DataCollectionEndpointResourceMapper
};
export const body1 = {
    parameterPath: ["options", "body"],
    mapper: ResourceForUpdateMapper
};
export const resourceUri1 = {
    parameterPath: "resourceUri",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "resourceUri",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const dataCollectionRuleName = {
    parameterPath: "dataCollectionRuleName",
    mapper: {
        serializedName: "dataCollectionRuleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const associationName = {
    parameterPath: "associationName",
    mapper: {
        serializedName: "associationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body2 = {
    parameterPath: ["options", "body"],
    mapper: DataCollectionRuleAssociationProxyOnlyResourceMapper
};
export const body3 = {
    parameterPath: ["options", "body"],
    mapper: DataCollectionRuleResourceMapper
};
//# sourceMappingURL=parameters.js.map